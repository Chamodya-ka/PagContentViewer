{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nexport function RetrieveAllVideosList(setFileList) {\n  _s();\n  // TODO: add sub directories if needed\n  // const [fileList,setFileList] = useState([])\n\n  useEffect(() => {\n    fetchFileList();\n  }, []);\n  const fetchFileList = async () => {\n    try {\n      // Make a GET request using the Fetch API\n      const response = await fetch('http://localhost:8081');\n\n      // Check if the response is successful (status code 200-299)\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n\n      // Parse the JSON data from the response\n      const result = await response.json();\n\n      // Update the state with the fetched data\n      setFileList(JSON.stringify(result));\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n    }\n  };\n}\n_s(RetrieveAllVideosList, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = RetrieveAllVideosList;\nvar _c;\n$RefreshReg$(_c, \"RetrieveAllVideosList\");","map":{"version":3,"names":["useEffect","RetrieveAllVideosList","setFileList","_s","fetchFileList","response","fetch","ok","Error","result","json","JSON","stringify","error","console","message","_c","$RefreshReg$"],"sources":["/home/chamodyaa/Workspace_Other/side_project/ContentManagement/PagContentViewer/src/hooks/retrieveAllVideos.js"],"sourcesContent":["import { useEffect} from \"react\";\n\nexport function RetrieveAllVideosList(setFileList){\n    // TODO: add sub directories if needed\n    // const [fileList,setFileList] = useState([])\n\n    useEffect(()=> {fetchFileList()},[]);\n\n    const fetchFileList = async() => {\n        try {\n            // Make a GET request using the Fetch API\n            const response = await fetch('http://localhost:8081');\n            \n            // Check if the response is successful (status code 200-299)\n            if (!response.ok) {\n              throw new Error('Network response was not ok');\n            }\n      \n            // Parse the JSON data from the response\n            const result = await response.json();\n      \n            // Update the state with the fetched data\n            setFileList(JSON.stringify(result));\n          } catch (error) {\n            console.error('Error fetching data:', error.message);\n          }\n        };\n      \n}"],"mappings":";AAAA,SAASA,SAAS,QAAO,OAAO;AAEhC,OAAO,SAASC,qBAAqBA,CAACC,WAAW,EAAC;EAAAC,EAAA;EAC9C;EACA;;EAEAH,SAAS,CAAC,MAAK;IAACI,aAAa,CAAC,CAAC;EAAA,CAAC,EAAC,EAAE,CAAC;EAEpC,MAAMA,aAAa,GAAG,MAAAA,CAAA,KAAW;IAC7B,IAAI;MACA;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uBAAuB,CAAC;;MAErD;MACA,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;;MAEA;MACA,MAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;;MAEpC;MACAR,WAAW,CAACS,IAAI,CAACC,SAAS,CAACH,MAAM,CAAC,CAAC;IACrC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACE,OAAO,CAAC;IACtD;EACF,CAAC;AAET;AAACZ,EAAA,CA1BeF,qBAAqB;AAAAe,EAAA,GAArBf,qBAAqB;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}