{"ast":null,"code":"var _jsxFileName = \"/home/chamodyaa/Workspace_Other/side_project/ContentManagement/PagContentViewer/src/randomVideoPlayer/RandomVideoPlayer.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport useSWR from 'swr';\nimport { tvVideoMapping } from \"../commonData/tvVideoMapping\";\nimport { RetrieveAllVideosList } from \"../hooks/retrieveAllVideos\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction handleOnEnded(currentVideo) {\n  console.log(\"ended\");\n  currentVideo.set(currentVideo.get + 1);\n}\nexport function RandomVideoPlayer({\n  tvName\n}) {\n  _s();\n  const fetcher = (...args) => fetch(...args).then(res => res.json());\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"failed to load\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 23\n  }, this);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 27\n  }, this);\n  const videoRef = useRef();\n  const [currentVideoCount, setCurrentVideoCount] = useState(0);\n  const [videoListJSON, setVideoListJSON] = useState([]);\n  const [retrievedList, setRetrievedList] = useState(false);\n  const videoDir = tvVideoMapping.find(mapping => mapping.tvName == tvName).directory;\n  RetrieveAllVideosList().then(res => {\n    setVideoListJSON(res);\n    setRetrievedList(true);\n  });\n  useEffect(() => {\n    console.log(videoListJSON);\n  }, [retrievedList]);\n\n  // console.log(videoListJSON[0])\n  // console.log(`http://localhost:8080/resources/${videoDir}/${videoListJSON[currentVideoCount]}`)\n  // console.log(JSON.parse(videoListJSON.json),\"HERE\")\n  // console.log(`localhost:8080/${videoDir}/${videoListJSON.$(currentVideoCount)}.mp4`);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [tvName, \" - all videos\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), retrievedList && /*#__PURE__*/_jsxDEV(\"video\", {\n      onEnded: () => handleOnEnded({\n        get: currentVideoCount,\n        set: setCurrentVideoCount\n      }),\n      ref: videoRef,\n      width: 750,\n      controls: true,\n      autoPlay: true,\n      children: /*#__PURE__*/_jsxDEV(\"source\", {\n        src: `http://localhost:8080/resources/${videoDir}/${videoListJSON[currentVideoCount]}`,\n        type: \"video/mp4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true);\n}\n_s(RandomVideoPlayer, \"4iMz34GO+ZzUzXHEfNIApStM0fA=\");\n_c = RandomVideoPlayer;\nvar _c;\n$RefreshReg$(_c, \"RandomVideoPlayer\");","map":{"version":3,"names":["useEffect","useMemo","useRef","useState","useSWR","tvVideoMapping","RetrieveAllVideosList","jsxDEV","_jsxDEV","Fragment","_Fragment","handleOnEnded","currentVideo","console","log","set","get","RandomVideoPlayer","tvName","_s","fetcher","args","fetch","then","res","json","error","children","fileName","_jsxFileName","lineNumber","columnNumber","isLoading","videoRef","currentVideoCount","setCurrentVideoCount","videoListJSON","setVideoListJSON","retrievedList","setRetrievedList","videoDir","find","mapping","directory","onEnded","ref","width","controls","autoPlay","src","type","_c","$RefreshReg$"],"sources":["/home/chamodyaa/Workspace_Other/side_project/ContentManagement/PagContentViewer/src/randomVideoPlayer/RandomVideoPlayer.js"],"sourcesContent":["import {useEffect, useMemo, useRef, useState} from \"react\";\nimport useSWR from 'swr'\n\nimport {tvVideoMapping} from \"../commonData/tvVideoMapping\";\nimport {RetrieveAllVideosList} from \"../hooks/retrieveAllVideos\";\n\nfunction handleOnEnded(currentVideo) {\n    console.log(\"ended\")\n    currentVideo.set(currentVideo.get+1);\n}\n\nexport function RandomVideoPlayer({tvName}) {\n\n    const fetcher = (...args) => fetch(...args).then(res => res.json());    \n\n    if (error) return <div>failed to load</div>\n    if (isLoading) return <div>loading...</div>\n\n    const videoRef = useRef();\n    const [currentVideoCount, setCurrentVideoCount] = useState(0);\n    const [videoListJSON,setVideoListJSON] = useState([])\n    const [retrievedList, setRetrievedList] = useState(false)\n    const videoDir = tvVideoMapping.find(mapping => mapping.tvName == tvName).directory;\n    RetrieveAllVideosList().then( res => {setVideoListJSON(res);setRetrievedList(true)});\n    useEffect(()=>{\n        console.log(videoListJSON);\n    },[retrievedList])\n    \n    // console.log(videoListJSON[0])\n    // console.log(`http://localhost:8080/resources/${videoDir}/${videoListJSON[currentVideoCount]}`)\n    // console.log(JSON.parse(videoListJSON.json),\"HERE\")\n    // console.log(`localhost:8080/${videoDir}/${videoListJSON.$(currentVideoCount)}.mp4`);\n\n    return (\n        <>\n            <div>\n                {tvName} - all videos\n            </div>\n            {(retrievedList) && \n             <video onEnded={()=>handleOnEnded({get:currentVideoCount, set:setCurrentVideoCount})} ref={videoRef} width={750} controls autoPlay>\n                <source src={`http://localhost:8080/resources/${videoDir}/${videoListJSON[currentVideoCount]}`} type=\"video/mp4\"/>\n                {/* <source src={`http://localhost:8080/resources/all/${videoListJSON[currentVideoCount]}`} type=\"video/mp4\"/> */}\n             </video>\n            }\n           \n        </>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}