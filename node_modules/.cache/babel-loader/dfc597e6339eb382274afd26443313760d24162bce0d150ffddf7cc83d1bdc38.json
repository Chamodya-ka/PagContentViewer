{"ast":null,"code":"import { useEffect } from \"react\";\nexport async function RetrieveAllVideosList(setFileList) {\n  // TODO: add sub directories if needed\n  // const [fileList,setFileList] = useState([])\n\n  const fetchFileList = async () => {\n    try {\n      // Make a GET request using the Fetch API\n      const response = await fetch('http://localhost:8081');\n\n      // Check if the response is successful (status code 200-299)\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n\n      // Parse the JSON data from the response\n      const result = await response.json();\n\n      // Update the state with the fetched data\n      setFileList(JSON.parse(result));\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n    }\n  };\n}\n_c = RetrieveAllVideosList;\nvar _c;\n$RefreshReg$(_c, \"RetrieveAllVideosList\");","map":{"version":3,"names":["useEffect","RetrieveAllVideosList","setFileList","fetchFileList","response","fetch","ok","Error","result","json","JSON","parse","error","console","message","_c","$RefreshReg$"],"sources":["/home/chamodyaa/Workspace_Other/side_project/ContentManagement/PagContentViewer/src/hooks/retrieveAllVideos.js"],"sourcesContent":["import { useEffect} from \"react\";\n\nexport async function RetrieveAllVideosList(setFileList){\n    // TODO: add sub directories if needed\n    // const [fileList,setFileList] = useState([])\n\n    \n\n    const fetchFileList = async() => {\n        try {\n            // Make a GET request using the Fetch API\n            const response = await fetch('http://localhost:8081');\n            \n            // Check if the response is successful (status code 200-299)\n            if (!response.ok) {\n              throw new Error('Network response was not ok');\n            }\n      \n            // Parse the JSON data from the response\n            const result = await response.json();\n      \n            // Update the state with the fetched data\n            setFileList(JSON.parse(result));\n          } catch (error) {\n            console.error('Error fetching data:', error.message);\n          }\n        };\n      \n}"],"mappings":"AAAA,SAASA,SAAS,QAAO,OAAO;AAEhC,OAAO,eAAeC,qBAAqBA,CAACC,WAAW,EAAC;EACpD;EACA;;EAIA,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAW;IAC7B,IAAI;MACA;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uBAAuB,CAAC;;MAErD;MACA,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;;MAEA;MACA,MAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;;MAEpC;MACAP,WAAW,CAACQ,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,CAAC;IACjC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACE,OAAO,CAAC;IACtD;EACF,CAAC;AAET;AAACC,EAAA,GA1BqBd,qBAAqB;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}