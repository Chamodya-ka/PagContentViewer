{"ast":null,"code":"import { useEffect } from \"react\";\nexport async function RetrieveAllVideosList(setFileList) {\n  const fetcher = (...args) => fetch(...args).then(res => res.json());\n  // const fetchFileList = async() => {\n  try {\n    // Make a GET request using the Fetch API\n    const response = await fetch('http://localhost:8081');\n\n    // Check if the response is successful (status code 200-299)\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n\n    // Parse the JSON data from the response\n    const result = await response.json();\n\n    // Update the state with the fetched data\n    setFileList(JSON.parse(result));\n  } catch (error) {\n    console.error('Error fetching data:', error.message);\n  }\n  // };\n}\n_c = RetrieveAllVideosList;\nvar _c;\n$RefreshReg$(_c, \"RetrieveAllVideosList\");","map":{"version":3,"names":["useEffect","RetrieveAllVideosList","setFileList","fetcher","args","fetch","then","res","json","response","ok","Error","result","JSON","parse","error","console","message","_c","$RefreshReg$"],"sources":["/home/chamodyaa/Workspace_Other/side_project/ContentManagement/PagContentViewer/src/hooks/retrieveAllVideos.js"],"sourcesContent":["import { useEffect} from \"react\";\n\nexport async function RetrieveAllVideosList(setFileList){\n  const fetcher = (...args) => fetch(...args).then(res => res.json())\n    // const fetchFileList = async() => {\n        try {\n            // Make a GET request using the Fetch API\n            const response = await fetch('http://localhost:8081');\n            \n            // Check if the response is successful (status code 200-299)\n            if (!response.ok) {\n              throw new Error('Network response was not ok');\n            }\n      \n            // Parse the JSON data from the response\n            const result = await response.json();\n      \n            // Update the state with the fetched data\n            setFileList(JSON.parse(result));\n        \n          } catch (error) {\n            console.error('Error fetching data:', error.message);\n          }\n        // };\n      \n}"],"mappings":"AAAA,SAASA,SAAS,QAAO,OAAO;AAEhC,OAAO,eAAeC,qBAAqBA,CAACC,WAAW,EAAC;EACtD,MAAMC,OAAO,GAAGA,CAAC,GAAGC,IAAI,KAAKC,KAAK,CAAC,GAAGD,IAAI,CAAC,CAACE,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;EACjE;EACI,IAAI;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAAC,uBAAuB,CAAC;;IAErD;IACA,IAAI,CAACI,QAAQ,CAACC,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;;IAEA;IACA,MAAMC,MAAM,GAAG,MAAMH,QAAQ,CAACD,IAAI,CAAC,CAAC;;IAEpC;IACAN,WAAW,CAACW,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC,CAAC;EAEjC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACE,OAAO,CAAC;EACtD;EACF;AAER;AAACC,EAAA,GAvBqBjB,qBAAqB;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}