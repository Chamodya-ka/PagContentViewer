{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nexport function RetrieveAllVideosList() {\n  _s();\n  // TODO: add sub directories if needed\n  const [fileList, setFileList] = useState([]);\n  useEffect(() => {\n    fetchFileList();\n  }, []);\n  const fetchFileList = async () => {\n    await fetch(\"http://localhost:8081\").then(response => response.json()).then(response => setFileList(response.result)).catch(err => console.error(err));\n  };\n}\n_s(RetrieveAllVideosList, \"Pvb7+bA2OenP+jnZXnhyVOt019g=\");\n_c = RetrieveAllVideosList;\nvar _c;\n$RefreshReg$(_c, \"RetrieveAllVideosList\");","map":{"version":3,"names":["useEffect","useState","RetrieveAllVideosList","_s","fileList","setFileList","fetchFileList","fetch","then","response","json","result","catch","err","console","error","_c","$RefreshReg$"],"sources":["/home/chamodyaa/Workspace_Other/side_project/ContentManagement/PagContentViewer/src/hooks/retrieveAllVideos.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport function RetrieveAllVideosList(){\n    // TODO: add sub directories if needed\n    const [fileList,setFileList] = useState([])\n\n    useEffect(()=> {fetchFileList()},[]);\n\n    const fetchFileList = async() => {\n    await fetch(\"http://localhost:8081\")\n        .then(response => response.json())\n        .then(response => setFileList(response.result))\n        .catch(err => console.error(err))\n    }\n\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAO,SAASC,qBAAqBA,CAAA,EAAE;EAAAC,EAAA;EACnC;EACA,MAAM,CAACC,QAAQ,EAACC,WAAW,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAE3CD,SAAS,CAAC,MAAK;IAACM,aAAa,CAAC,CAAC;EAAA,CAAC,EAAC,EAAE,CAAC;EAEpC,MAAMA,aAAa,GAAG,MAAAA,CAAA,KAAW;IACjC,MAAMC,KAAK,CAAC,uBAAuB,CAAC,CAC/BC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACC,QAAQ,IAAIJ,WAAW,CAACI,QAAQ,CAACE,MAAM,CAAC,CAAC,CAC9CC,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC;EACrC,CAAC;AAEL;AAACV,EAAA,CAbeD,qBAAqB;AAAAc,EAAA,GAArBd,qBAAqB;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}